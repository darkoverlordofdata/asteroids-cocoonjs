// Generated by CoffeeScript 1.9.1

/*
 * Settings Module
 */
var HOST, enterPlayer, g_count, g_fbAppId, g_fbUserID, g_fbUserName, g_leaderboard, g_player, getKey, ready, registerPlayer, resumeGame, setAsteroidAngularVelocity, setAsteroidDamping, setAsteroidDensity, setAsteroidFriction, setAsteroidLinearVelocity, setAsteroidRestitution, setBackground, setBulletDamping, setBulletDensity, setBulletFriction, setBulletLinearVelocity, setBulletRestitution, setLeaderboard, setPlayMusic, setPlaySfx, setPlayer, setProfiler, setSpaceshipDamping, setSpaceshipDensity, setSpaceshipFriction, setSpaceshipRestitution;

g_fbAppId = null;

g_fbUserID = null;

g_fbUserName = null;

g_leaderboard = null;

g_player = null;

g_count = 0;


/*
 * location of the leaderboard server
 */

HOST = window.location.hostname === 'localhost' ? 'http://bosco.com:3000' : 'https://games.darkoverlordofdata.com';


/*
 * Return to the game
 */

resumeGame = function() {
  Cocoon.WebView.hide();
  Cocoon.Touch.enable();
  Cocoon.App.forward("asteroids.pause();");
};


/*
 * Build the key
 */

getKey = function(fbAppId, fbUserId) {
  var i, j, ref, result;
  fbAppId = '' + fbAppId;
  fbUserId = '' + fbUserId;
  result = [];
  for (i = j = 0, ref = Math.max(fbAppId.length, fbUserId.length); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    result.push(fbAppId[i]);
    result.push(fbUserId[i]);
  }
  return result.join('');
};


/*
Game Options
 */

setProfiler = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('profiler', '" + value + "');");
  return value;
};

setBackground = function(value) {
  if (value === 1) {
    Cocoon.App.forwardAsync("asteroids.set('background', 1);");
  } else {
    Cocoon.App.forwardAsync("asteroids.set('background', 0);");
  }
};

setLeaderboard = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('leaderboard', '" + value + "');");
  return value;
};

setPlayMusic = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('playMusic', " + value + ");");
  return value;
};

setPlaySfx = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('playSfx', " + value + ");");
  return value;
};


/*
Asteroids
 */

setAsteroidDensity = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('asteroidDensity', " + value + ");");
  return value;
};

setAsteroidFriction = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('asteroidFriction', " + value + ");");
  return value;
};

setAsteroidRestitution = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('asteroidRestitution', " + value + ");");
  return value;
};

setAsteroidDamping = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('asteroidDamping', " + value + ");");
  return value;
};

setAsteroidLinearVelocity = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('asteroidLinearVelocity', " + value + ");");
  return value;
};

setAsteroidAngularVelocity = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('asteroidAngularVelocity', " + value + ");");
  return value;
};


/*
Spaceships
 */

setSpaceshipDensity = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('spaceshipDensity', " + value + ");");
  return value;
};

setSpaceshipFriction = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('spaceshipFriction', " + value + ");");
  return value;
};

setSpaceshipRestitution = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('spaceshipRestitution', " + value + ");");
  return value;
};

setSpaceshipDamping = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('spaceshipDamping', " + value + ");");
  return value;
};


/*
Bullets
 */

setBulletDensity = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('bulletDensity', " + value + ");");
  return value;
};

setBulletFriction = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('bulletFriction', " + value + ");");
  return value;
};

setBulletRestitution = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('bulletRestitution', " + value + ");");
  return value;
};

setBulletDamping = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('bulletDamping', " + value + ");");
  return value;
};

setBulletLinearVelocity = function(value) {
  Cocoon.App.forwardAsync("asteroids.set('bulletLinearVelocity', " + value + ");");
  return value;
};


/*
 * Register the player
 */

registerPlayer = function() {
  var data, xhr;
  xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    var response;
    if (xhr.readyState === 4 && xhr.status === 200) {
      response = JSON.parse(xhr.responseText);
      console.log(response);
      if (response.status === 'ok') {
        $('#player').attr('disabled', true);
        $('#registerPlayer').attr('disabled', true);
        $("#leaderboard").val('on').slider("refresh");
        return setLeaderboard('on');
      }
    }
  };
  data = {
    key: getKey(g_fbAppId, g_fbUserID),
    appId: g_fbAppId,
    userId: g_fbUserID,
    description: 'testing'
  };
  xhr.open('POST', HOST + '/leaderboard/register/' + $('#player').val(), true);
  xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  return xhr.send(JSON.stringify(data));
};

setPlayer = function(value) {
  var xhr;
  xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    var response;
    if (xhr.readyState === 4 && xhr.status === 200) {
      response = JSON.parse(xhr.responseText);
      console.log(response);
      if (response.status !== 'ok') {
        $('#player').val(value);
        return $('#registerPlayer').attr('disabled', false);
      }
    }
  };
  xhr.open('GET', HOST + '/leaderboard/register/' + value, true);
  xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  return xhr.send();
};


/*
 * Display a dialog to enter the player screen name
 */

enterPlayer = function() {
  if (!Cocoon.App.nativeAvailable) {
    return false;
  }
  return Cocoon.Dialog.prompt({
    title: "Player",
    message: "Enter your screen name",
    text: $("#player").val(),
    type: Cocoon.Dialog.keyboardType.TEXT
  }, {

    /*
     * Validate the selected name
     */
    success: setPlayer,
    cancel: function() {}
  });
};


/*
 * Wait for all values to be ready
 */

ready = function(leaderboard, player, fbAppId, fbUserID, fbUserName) {
  if (leaderboard != null) {
    g_leaderboard = leaderboard;
    g_count++;
  }
  if (player != null) {
    g_player = player;
    g_count++;
  }
  if (fbAppId != null) {
    g_fbAppId = fbAppId;
    g_count++;
  }
  if (fbUserID != null) {
    g_fbUserID = fbUserID;
    g_count++;
  }
  if (fbUserName != null) {
    g_fbUserName = fbUserName;
    g_count++;
  }
  if (g_count === 5) {
    console.log('g_leaderboard', g_leaderboard);
    console.log('g_player', g_player);
    console.log('g_fbAppId', g_fbAppId);
    console.log('g_fbUserID', g_fbUserID);
    console.log('g_fbUserName', g_fbUserName);
    if (g_leaderboard === 'on' && (g_player === '' || g_player === g_fbUserName)) {
      console.log('call enterPlayer');
      if (Cocoon.App.nativeAvailable) {
        return Cocoon.Dialog.prompt({
          title: "Player",
          message: "Screen name required",
          text: $("#player").val(),
          type: Cocoon.Dialog.keyboardType.TEXT
        }, {

          /*
           * Validate the selected name
           */
          success: setPlayer,
          cancel: function() {}
        });
      } else {
        return setPlayer(prompt("Screen name required"));
      }
    }
  }
};


/*
 * OnLoad
 */

window.addEventListener("load", function() {
  var e;
  $("body").css("visibility", "visible");
  try {
    Cocoon.App.forwardAsync("asteroids.get('profiler');", function(value) {
      $("#profiler").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('background');", function(value) {
      if (value === 0) {
        $("#blueBgd").attr("checked", "checked");
      } else {
        $("#starBgd").attr("checked", "checked");
      }
      $("input[type=radio]").checkboxradio("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('leaderboard');", function(value) {
      $("#leaderboard").val(value).slider("refresh");
      console.log('initialize leaderboard', value);
      ready(value);
    });
    Cocoon.App.forwardAsync("asteroids.get('player');", function(value) {
      $("#player").val(value);
      console.log('initialize player', value);
      ready(void 0, value);
    });
    Cocoon.App.forwardAsync("asteroids.get('playMusic');", function(value) {
      $("#playMusic").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('playSfx');", function(value) {
      $("#playSfx").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('asteroidDensity');", function(value) {
      $("#asteroidDensity").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('asteroidFriction');", function(value) {
      $("#asteroidFriction").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('asteroidRestitution');", function(value) {
      $("#asteroidRestitution").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('asteroidDamping');", function(value) {
      $("#asteroidDamping").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('asteroidLinearVelocity');", function(value) {
      $("#asteroidLinearVelocity").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('asteroidAngularVelocity');", function(value) {
      $("#asteroidAngularVelocity").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('spaceshipDensity');", function(value) {
      $("#spaceshipDensity").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('spaceshipFriction');", function(value) {
      $("#spaceshipFriction").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('spaceshipRestitution');", function(value) {
      $("#spaceshipRestitution").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('spaceshipDamping');", function(value) {
      $("#spaceshipDamping").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('bulletDensity');", function(value) {
      $("#bulletDensity").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('bulletFriction');", function(value) {
      $("#bulletFriction").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('bulletRestitution');", function(value) {
      $("#bulletRestitution").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('bulletDamping');", function(value) {
      $("#bulletDamping").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.get('bulletLinearVelocity');", function(value) {
      $("#bulletLinearVelocity").val(value).slider("refresh");
    });
    Cocoon.App.forwardAsync("asteroids.getFbAppId();", function(fbAppId) {
      console.log('initialize fbAppId', fbAppId);
      ready(void 0, void 0, fbAppId);
    });
    Cocoon.App.forwardAsync("asteroids.getFbUserID();", function(fbUserID) {
      console.log('initialize fbUserID', fbUserID);
      ready(void 0, void 0, void 0, fbUserID);
    });
    Cocoon.App.forwardAsync("asteroids.getFbUserName();", function(fbUserName) {
      console.log('initialize fbUserName', fbUserName);
      ready(void 0, void 0, void 0, void 0, fbUserName);
    });
  } catch (_error) {
    e = _error;
    console.log(e.toString());
  } finally {
    Cocoon.Touch.disable();
  }
});
